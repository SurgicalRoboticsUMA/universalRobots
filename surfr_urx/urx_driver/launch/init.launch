<?xml version="1.0" encoding="utf-8"?>
<launch><!-- NOTE: MUST CREATE A LAUNCH FILE FOR EACH ROBOT (UR3, UR5, UR10) -->
   <arg default="172.16.48.129" name="ip"/> <!-- IP address to open channel communication. Disabled on simulation mode      -->
   <arg default="true" name="urdf"/> <!-- Visualize virtual environment. Valid values: {true|false}.                 -->
   <arg default="0.0 0.0 0.0" name="tcp_position"/> <!-- Adds a position offset for the Tool Center Point                           -->
   <arg default="0.0 0.0 0.0" name="tcp_orientation"/> <!-- Adds a orientation offset for the Tool Center Point                        -->

   <arg default="false" name="distro_legacy"/> <!-- Execution will consider an legacy version of ROS (hydro or older)          -->
   <arg default="std" name="msg_type"/> <!-- Choose between std_msgs and surfr_msgs packages. Valid values: {std|surfr} -->
   <arg default="false" name="debug"/> <!-- Use debug mode to output detailed runtime info. Valid values: {true|false} -->
   <arg default="false" name="simulation"/> <!-- Use only the device simulation mode or both, simulator and real component  -->
   <arg default="1" name="id"/> <!-- Device ID number                                                           -->
   <arg default="world" name="origin_name"/> <!-- Name of the device parent frame                                            -->
   <arg default="0 0 0" name="origin_position"/> <!-- Initial position of the root_link reference frame                          -->
   <arg default="0           0    0" name="origin_orientation"/> <!-- Initial YPR (Euler XYZ) orientation of the root_link reference frame       -->

   <arg default="3.5" name="polyscope_version"/> <!-- Valid values: 3.0 (for 3.0-3.1); 3.2 (for 3.2-3.4) or 3.5 (for 3.5-3.8)    --><!-- IMPORTANT: The namespace of each node consists of the device model name followed by the '_'
                  sign and the ID number which labels a particular device. -->
   <arg name="devid" value="UR3_$(arg id)"/> <!-- For internal use, represents the device model and id tag                   --><!-- ROS PARAMETERS INITIALIZATION -->
   <include file="$(find surfr_core)/launch/start.launch"/>
   <env name="ROSCONSOLE_FORMAT" value="[${severity}][${node}:${function}:${line}] [${time}]: ${message}"/>
   <env if="$(arg debug)" name="ROSCONSOLE_CONFIG_FILE" value="$(find surfr_core)/config/rosconsole_debug.config"/>
   <env name="ROSCONSOLE_CONFIG_FILE" unless="$(arg debug)" value="$(find surfr_core)/config/rosconsole_nodebug.config"/><!-- YAML CONFIGURATION PARAMETERS -->
   <rosparam command="load" file="$(find urx_driver)/yaml/settings.yaml" ns="$(arg devid)"/>
   <rosparam command="load" file="$(find urx_driver)/yaml/inputs.yaml" ns="$(arg devid)/inputs"/>
   <rosparam command="load" file="$(find urx_driver)/yaml/outputs.yaml" ns="$(arg devid)/outputs"/>
   <rosparam command="load" file="$(find urx_driver)/yaml/services.yaml" ns="$(arg devid)/services"/>
   <rosparam command="load" file="$(find urx_driver)/yaml/filters.yaml" ns="$(arg devid)/filters"/>
   <rosparam command="load" file="$(find urx_driver)/yaml/planners.yaml" ns="$(arg devid)/planners"/>
   <rosparam ns="$(arg devid)" subst_value="true">
    debug     : $(arg debug)
    msg_type  : $(arg msg_type)
    origin: {position   : $(arg origin_position),
             orientation: $(arg origin_orientation),
             parent     : $(arg origin_name),
             child      : "$(arg devid)/root_link"}
    tcp: {position   : $(arg tcp_position),
          orientation: $(arg tcp_orientation),
          parent     : "$(arg devid)/ee_link",
          child      : "$(arg devid)/tcp_link"}
  </rosparam>
   <rosparam ns="$(arg devid)" subst_value="true" unless="$(arg simulation)">
    sockets   :
      version: '$(arg polyscope_version)'
      ip     : '$(arg ip)'
  </rosparam><!-- MoveIt! for Universal Robots UR3 -->
   <include file="$(find urx_driver)/launch/moveit_$(env ROS_DISTRO).launch" ns="$(arg devid)">
      <arg name="devid" value="$(arg devid)"/>
      <arg name="simulation" value="$(arg simulation)"/>
      <arg name="origin_name" value="$(arg origin_name)"/>
      <arg name="origin_position" value="$(arg origin_position)"/>
      <arg name="origin_orientation" value="$(arg origin_orientation)"/>
      <arg name="tcp_position" value="$(arg tcp_position)"/>
      <arg name="tcp_orientation" value="$(arg tcp_orientation)"/>
   </include><!-- Run Node -->
   <node args="--debug __class=DeviceURx" if="$(arg debug)" name="$(arg devid)" output="screen" pkg="surfr_core" required="true" type="main_device"/>
   <node args="--nodebug __class=DeviceURx" name="$(arg devid)" output="screen" pkg="surfr_core" required="true" type="main_device" unless="$(arg debug)"/><!-- RViz Simulator -->
   <node args="-d $(find urx_driver)/urdf/urx.rviz" if="$(arg urdf)" name="rviz" ns="$(arg devid)" pkg="rviz" type="rviz">
      <remap from="robot_description" to="urdf/model"/>
   </node><!-- For simulation mode only. Load of a GUI to manipulate the joint values -->
   <node if="$(arg simulation)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="use_gui" value="true"/>
      <remap from="robot_description" to="$(arg devid)/urdf/model"/>
      <remap from="joint_states" to="$(arg devid)/inputs/move_joints"/>
   </node><!--  <rosparam ns="$(arg devid)/planners" command="load" file="$(find urx_driver)/yaml$(env ROS_DISTRO)/planners.yaml" />-->
</launch>

